name: CI

on:
  push:
    branches:
      - master
      - dev
      - 'feature/**'
      - 'fix/**'
  pull_request:
    branches:
      - master
      - dev
      - 'feature/**'
      - 'fix/**'

jobs:
  checkout_code:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

  archive_dependencies:
    needs: checkout_code
    runs-on: self-hosted
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Restore local Maven cache
        run: mkdir -p ~/.m2/repository; if [ -f maven_cache.tar.gz ]; then tar xzf maven_cache.tar.gz -C ~/.m2; fi

      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Archive Maven dependencies
        run: tar czvf maven_dependencies.tgz -C ~/.m2 repository .

  sca_testing:
    needs: archive_dependencies
    runs-on: self-hosted
    steps:
      - name: Restore local Maven cache
        run: mkdir -p ~/.m2/repository; if [ -f maven_cache.tar.gz ]; then tar xzf maven_cache.tar.gz -C ~/.m2; fi

      - name: Extract Maven dependencies
        run: tar xvf maven_dependencies.tgz

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          maven-version: '3.8.1'

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Run Snyk test
        run: snyk test --all-projects
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: false

  build:
    needs: sca_testing
    runs-on: self-hosted
    steps:
      - name: Restore local Maven cache
        run: mkdir -p ~/.m2/repository; if [ -f maven_cache.tar.gz ]; then tar xzf maven_cache.tar.gz -C ~/.m2; fi

      - name: Extract Maven dependencies
        run: tar xvf maven_dependencies.tgz

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION }}
          JWT_HEADER: ${{ secrets.JWT_HEADER }}
          JWT_PREFIX: ${{ secrets.JWT_PREFIX }}
        run: |
          mvn clean compile package -Dmaven.test.skip=true --batch-mode --no-transfer-progress \
          -Djwt.secret="${JWT_SECRET}" \
          -Djwt.token.expiration="${JWT_EXPIRATION}" \
          -Djwt.token.header="${JWT_HEADER}" \
          -Djwt.token.prefix="${JWT_PREFIX}"

  test:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Restore local Maven cache
        run: mkdir -p ~/.m2/repository; if [ -f maven_cache.tar.gz ]; then tar xzf maven_cache.tar.gz -C ~/.m2; fi

      - name: Run tests
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION }}
          JWT_HEADER: ${{ secrets.JWT_HEADER }}
          JWT_PREFIX: ${{ secrets.JWT_PREFIX }}
          SPRING_DDL_AUTO: ${{ secrets.SPRING_DDL_AUTO }}
          SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          SPRING_DATASOURCE_DRIVER: ${{ secrets.SPRING_DATASOURCE_DRIVER }}
        run: |
          mvn test --batch-mode --no-transfer-progress \
          -Dspring.profiles.active=test-in-db \
          -Djwt.secret="${JWT_SECRET}" \
          -Djwt.token.expiration="${JWT_EXPIRATION}" \
          -Djwt.token.header="${JWT_HEADER}" \
          -Djwt.token.prefix="${JWT_PREFIX}" \
          -Dspring.jpa.hibernate.ddl-auto="${SPRING_DDL_AUTO}" \
          -Dspring.datasource.url="${SPRING_DATASOURCE_URL}" \
          -Dspring.datasource.username="${SPRING_DATASOURCE_USERNAME}" \
          -Dspring.datasource.password="${SPRING_DATASOURCE_PASSWORD}" \
          -Dspring.datasource.driver-class-name="${SPRING_DATASOURCE_DRIVER}"

  deploy:
    needs: test
    runs-on: self-hosted
    steps:
      - name: Copy built artifacts (pre-production)
        if: github.ref == 'refs/heads/dev'
        run: for jarFile in `find . -name *SNAPSHOT.jar`; do cp $jarFile /root/pa-cxr/pre-prod/back/.; done

      - name: Run the application (pre-production)
        if: github.ref == 'refs/heads/dev'
        run: cd /root/pa-cxr/pre-prod/back/; sh run_back.sh

      - name: Copy built artifacts (production)
        if: github.ref == 'refs/heads/master'
        run: for jarFile in `find . -name *SNAPSHOT.jar`; do cp $jarFile /root/pa-cxr/prod/back/.; done

      - name: Run the application (production)
        if: github.ref == 'refs/heads/master'
        run: cd /root/pa-cxr/prod/back/; sh run_back.sh
